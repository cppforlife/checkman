#!/usr/bin/env ruby
require "rubygems"
require "json"
require "yaml"

class CfAppsStatus
  def initialize(app_prefix, json)
    @apps_data = JSON.parse(json)["apps"]
    raise ArgumentError, "No apps in space: '#{json}'" unless @apps_data

    @apps_data \
      .select! { |app| app["name"].start_with?(app_prefix) } \
      .sort_by! { |app| app["name"] }
  end

  def all_100_percent?
    @apps_data.all? do |app|
      app["running_instances"].to_i == app["instances"].to_i
    end
  end

  def as_json(*)
    {
      :result => all_100_percent?,
      :changing => false,
      :url => nil,
      :info => info
    }
  end

  def to_json(*)
    JSON.dump(as_json)
  end

  private

  def info
    @apps_data.map do |app|
      [app["name"], app_details(app)]
    end
  end

  def app_details(app)
    [ "#{app["running_instances"]}/#{app["instances"]}",
      "#{app["state"]} -",
      "#{app["memory"]}MB / #{app["disk_quota"]}MB"
    ].join(" ")
  end
end

class CfApps
  def initialize(cc_target_url, space_id, app_prefix)
    raise ArgumentError "cc_target must not be nil" \
      unless @cc_target_url = cc_target_url

    raise ArgumentError "space_id must not be nil" \
      unless @space_id = space_id

    raise ArgumentError "app_prefix must not be nil" \
      unless @app_prefix = app_prefix
  end

  def latest_status
    CfAppsStatus.new(@app_prefix, run)
  end

  private

  def run
    curl  = "curl -sk -A \"CheckmanCfApps (Hostname: $HOSTNAME)\""
    curl += " -H 'Authorization: #{auth_token_header}'"
    curl += " '#{api_url}'"
    `#{curl}`.tap { |o| $stderr.puts curl, o }
  end

  def api_url
    "#{@cc_target_url}/v2/spaces/#{@space_id}/summary"
  end

  def auth_token_header
    tokens_yml = YAML.load_file(File.expand_path("~/.cf/tokens.yml"))
    tokens_yml[@cc_target_url][:token]
  end
end

puts CfApps.new(*ARGV).latest_status.to_json if __FILE__ == $0
