#!/usr/bin/env ruby
require "rubygems"
require "shellwords"
require "json"

class JenkinsJobTree
  BUILD_FIELDS = {
    :id        => true,
    :result    => true,
    :building  => true,
    :fullDisplayName => true,
    :url       => true,
    :timestamp => true,
    :duration  => true,
    :changeSet => {
      :items => {
        :msg => true,
        :commitId => true,
        :author => {
          :fullName => true
        }
      }
    },
    :actions => {
      :lastBuiltRevision => {
        :SHA1 => true
      }
    }
  }

  JOB_FIELDS = {
    :name  => true,
    :color => true,
    :lastBuild => BUILD_FIELDS,
    :lastSuccessfulBuild => BUILD_FIELDS
  }

  JOBS_FIELDS = {:jobs => JOB_FIELDS}

  def self.for_job;      new(JOB_FIELDS);  end
  def self.for_all_jobs; new(JOBS_FIELDS); end
  def initialize(hash);  @hash = hash;     end

  def to_param
    stringify = lambda { |h|
      h.map do |k,v|
        # escaping '[' since bash will glob otherwise
        v.is_a?(Hash) ? "#{k}\\[#{stringify.call(v)}\\]" : k
      end.join(",")
    }
    stringify.call(@hash)
  end
end

class JenkinsBuildStatus
  def initialize(hash)
    @build_data = hash
  end

  def id
    @build_data["id"]
  end

  def success?
    @build_data["result"] == "SUCCESS"
  end

  def building?
    @build_data["building"]
  end

  def full_name
    @build_data["fullDisplayName"]
  end

  def console_url
    @build_data["url"] + "console"
  end

  def started_at
    Time.at(@build_data["timestamp"]/1000)
  end

  def formatted_started_at
    started_at.strftime("%I:%M%p %m/%d/%Y %Z")
  end

  def duration
    # unlikely that duration >24hrs
    Time.at(@build_data["duration"]/1000).gmtime.strftime("%R:%S")
  end

  def last_commit_author
    change_set = @build_data["changeSet"]["items"].last
    change_set && change_set["author"]["fullName"]
  end

  def last_commit_short_sha
    build_action = @build_data["actions"].compact.detect { |a| a["lastBuiltRevision"] }
    build_action && build_action["lastBuiltRevision"]["SHA1"][0..5]
  end

  def recent_commit_messages
    items = @build_data["changeSet"]["items"].reverse
    items.map do |i|
      commit_id = i["commitId"][0..5] if i["commitId"]
      [" - #{i["msg"]}", commit_id || "<missing>"]
    end
  end

  def as_json(*)
    {
      :result => success?,
      :changing => building?,
      :url => console_url,
      :info => [
        [:Build, full_name],
        [:Duration, duration],
        [:Started, formatted_started_at],
        [:SHA, last_commit_short_sha]
      ] + optional_info
    }
  end

  def to_json(*)
    JSON.dump(as_json)
  end

  private

  def optional_info
    last_commit_author_with_header + recent_commit_messages_with_header
  end

  def last_commit_author_with_header
    author = last_commit_author
    author ? [[:Author, last_commit_author]] : []
  end

  def recent_commit_messages_with_header
    messages = recent_commit_messages
    messages.any? ? [["-", ""], ["Recents", ""]] + messages : []
  end
end

class JenkinsJobStatus
  def self.from_json(json)
    new(JSON.parse(json))
  rescue JSON::ParserError
    raise RuntimeError, "invalid json: '#{json}'"
  end

  def initialize(job_data)
    @job_data = job_data
    @last_build_status =
      JenkinsBuildStatus.new(@job_data["lastBuild"])

    if @job_data["lastSuccessfulBuild"]
      @last_successful_build_status =
        JenkinsBuildStatus.new(@job_data["lastSuccessfulBuild"])
    end
  end

  def name
    @job_data["name"]
  end

  def ok?
    %w(blue blue_anime).include?(@job_data["color"])
  end

  def as_json(*)
    @last_build_status.as_json.tap do |json|
      json[:result] = ok?
      json[:info].concat(additional_info || [])
    end
  end

  def to_json(*)
    JSON.dump(as_json)
  end

  private

  def additional_info
    if @last_successful_build_status
      return last_successful_build_info \
        unless @last_build_status.id == @last_successful_build_status.id
    end
  end

  def last_successful_build_info
    status = @last_successful_build_status
    [ ["-", ""],
      ["Last Successful Build", ""],
      [" - Name", status.full_name],
      [" - Duration", status.duration],
      [" - SHA", status.last_commit_short_sha],
      [" - Started", status.formatted_started_at] ]
  end
end

class JenkinsJobStatuses
  def self.from_json(json)
    job_datas = JSON.parse(json)["jobs"]
    new(job_datas.map { |jd| JenkinsJobStatus.new(jd) })
  rescue JSON::ParserError
    raise RuntimeError, "invalid json: '#{json}'"
  end

  def initialize(job_statuses)
    @job_statuses = job_statuses
  end

  def status_for_job(job_name)
    @job_statuses.detect { |js| js.name == job_name } || \
      raise(RuntimeError, "Status for job name is not available")
  end
end

class JenkinsJob
  def initialize(jenkins_url, name, *flags)
    raise ArgumentError "jenkins_url must not be nil" \
      unless @jenkins_url = jenkins_url

    raise ArgumentError "name must not be nil" \
      unless @name = name

    @uses_root_api = flags.include?("--root-api")
    @pretty_api    = flags.include?("--pretty-api")
  end

  def latest_status
    json = force_utf8(http_get(job_url))
    if @uses_root_api
      JenkinsJobStatuses.from_json(json) \
        .status_for_job(@name)
    else
      JenkinsJobStatus.from_json(json)
    end
  end

  private

  def job_url
    if @uses_root_api
      path = "/api/json"
      depth_param = 2
      tree_param  = JenkinsJobTree.for_all_jobs.to_param
    else
      path = "/job/#{@name}/api/json"
      depth_param = 1
      tree_param  = JenkinsJobTree.for_job.to_param
    end

    pretty = "&pretty=true" if @pretty_api

    "#{@jenkins_url}#{path}?depth=#{depth_param}&tree=#{tree_param}#{pretty}"
  end

  def http_get(url)
    curl = "curl -sk -A \"CheckmanJenkins (Hostname: $HOSTNAME)\" '#{url}'"
    `#{curl}`.tap { |o| $stderr.puts curl, o }
  end

  def force_utf8(string)
    if string.respond_to?(:encode)
      # Use 'binary' as source encoding since conversion
      # to the same encoding is a no-op even if there are
      # invalid bytes.
      string.encode(string.encoding, "binary", :invalid => :replace, :undef => :replace)
    else
      string
    end
  end
end

puts JenkinsJob.new(*ARGV).latest_status.to_json if __FILE__ == $0
